openapi: 3.0.1
info:
  title: kuvasz
  description: "Kuvasz [pronounce as 'koovas'] is an open-source uptime and SSL monitoring\
    \ service"
  contact:
    url: https://github.com/kuvasz-uptime/kuvasz
  version: latest
tags:
- name: Management operations
- name: Monitor operations
- name: Settings operations
paths:
  /api/v1/monitors:
    get:
      tags:
      - Monitor operations
      summary: Returns all monitors with their details
      operationId: getMonitorsWithDetails
      parameters:
      - name: enabled
        in: query
        schema:
          type: boolean
          nullable: true
      - name: uptimeStatus
        in: query
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/UptimeStatus"
      - name: sslStatus
        in: query
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/SslStatus"
      - name: sslCheckEnabled
        in: query
        schema:
          type: boolean
          nullable: true
      responses:
        "200":
          description: Successful query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MonitorDetailsDto"
      security:
      - apiKey: []
    post:
      tags:
      - Monitor operations
      summary: Creates a monitor
      operationId: createMonitor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorCreateDto"
        required: true
      responses:
        "201":
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorDto"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "405":
          description: "Monitors are in read-only mode, because they are loaded from\
            \ a YAML config file"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
      - apiKey: []
  /api/v1/monitors/export/yaml:
    get:
      tags:
      - Monitor operations
      summary: Returns the export of all monitors in YAML format
      operationId: getYamlMonitorsExport
      responses:
        "200":
          description: Successful query
          content:
            application/x-yaml: {}
      security:
      - apiKey: []
  /api/v1/monitors/stats:
    get:
      tags:
      - Monitor operations
      summary: "Returns the overall, cumulative stats of all monitors"
      operationId: getMonitoringStats
      parameters:
      - name: period
        in: query
        schema:
          type: string
          description: "A Java Duration string, default 7d"
          nullable: true
      responses:
        "200":
          description: Successful query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitoringStatsDto"
      security:
      - apiKey: []
  /api/v1/monitors/{monitorId}:
    get:
      tags:
      - Monitor operations
      summary: Returns a monitor's details
      operationId: getMonitorDetails
      parameters:
      - name: monitorId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorDetailsDto"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
      - apiKey: []
    delete:
      tags:
      - Monitor operations
      summary: Deletes a monitor by ID
      operationId: deleteMonitor
      parameters:
      - name: monitorId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Successful deletion
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "405":
          description: "Monitors are in read-only mode, because they are loaded from\
            \ a YAML config file"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
      - apiKey: []
    patch:
      tags:
      - Monitor operations
      summary: Updates a monitor by ID
      operationId: updateMonitor
      parameters:
      - name: monitorId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorUpdateDto"
        required: true
      responses:
        "200":
          description: Successful update
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorDto"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "405":
          description: "Monitors are in read-only mode, because they are loaded from\
            \ a YAML config file"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
      - apiKey: []
  /api/v1/monitors/{monitorId}/ssl-events:
    get:
      tags:
      - Monitor operations
      summary: Returns the SSL events of the given monitor
      operationId: getSSLEvents
      parameters:
      - name: monitorId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SSLEventDto"
      security:
      - apiKey: []
  /api/v1/monitors/{monitorId}/stats:
    get:
      tags:
      - Monitor operations
      summary: Returns the stats of the given monitor
      operationId: getMonitorStats
      parameters:
      - name: monitorId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: period
        in: query
        schema:
          type: string
          description: "A Java Duration string, default 1d"
          nullable: true
      responses:
        "200":
          description: Successful query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorStatsDto"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
      - apiKey: []
  /api/v1/monitors/{monitorId}/uptime-events:
    get:
      tags:
      - Monitor operations
      summary: Returns the uptime events of the given monitor
      operationId: getUptimeEvents
      parameters:
      - name: monitorId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UptimeEventDto"
      security:
      - apiKey: []
  /api/v1/settings:
    get:
      tags:
      - Settings operations
      summary: Returns the current settings of the application
      operationId: getSettings
      responses:
        "200":
          description: Successful query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsDto"
      security:
      - apiKey: []
  /api/v1/health:
    get:
      tags:
      - Management operations
      summary: Health endpoint
      description: Returns the current status of the application
      operationId: health
      parameters: []
      responses:
        "200":
          description: Service is UP
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResult"
        "503":
          description: Service is DOWN
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResult"
components:
  schemas:
    HealthResult:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
          enum:
          - UP
          - DOWN
          - UNKNOWN
    HttpMethod:
      type: string
      enum:
      - GET
      - HEAD
    IntegrationDetailsDto:
      required:
      - enabled
      - global
      - id
      - name
      - type
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/IntegrationType"
        name:
          type: string
        enabled:
          type: boolean
        global:
          type: boolean
    IntegrationType:
      type: string
      enum:
      - EMAIL
      - PAGERDUTY
      - SLACK
      - TELEGRAM
    LatencyLogDto:
      required:
      - createdAt
      - id
      - latencyInMs
      type: object
      properties:
        id:
          type: integer
          format: int64
        latencyInMs:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
    MonitorCreateDto:
      required:
      - name
      - uptimeCheckInterval
      - url
      type: object
      properties:
        name:
          minLength: 1
          type: string
        url:
          pattern: "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
          type: string
        uptimeCheckInterval:
          minimum: 5
          type: integer
          format: int32
        enabled:
          type: boolean
          default: true
        sslCheckEnabled:
          type: boolean
          default: false
        requestMethod:
          allOf:
          - $ref: "#/components/schemas/HttpMethod"
          default: GET
        latencyHistoryEnabled:
          type: boolean
          default: true
        forceNoCache:
          type: boolean
          default: true
        followRedirects:
          type: boolean
          default: true
        sslExpiryThreshold:
          minimum: 0
          type: integer
          format: int32
          default: 30
        integrations:
          type: array
          nullable: true
          items:
            type: string
    MonitorDetailsDto:
      required:
      - createdAt
      - effectiveIntegrations
      - enabled
      - followRedirects
      - forceNoCache
      - id
      - integrations
      - latencyHistoryEnabled
      - name
      - requestMethod
      - sslCheckEnabled
      - sslExpiryThreshold
      - uptimeCheckInterval
      - url
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        url:
          type: string
          format: uri
        uptimeCheckInterval:
          type: integer
          format: int32
        enabled:
          type: boolean
        sslCheckEnabled:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          nullable: true
        uptimeStatus:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/UptimeStatus"
        uptimeStatusStartedAt:
          type: string
          format: date-time
          nullable: true
        lastUptimeCheck:
          type: string
          format: date-time
          nullable: true
        nextUptimeCheck:
          type: string
          format: date-time
          nullable: true
        sslStatus:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/SslStatus"
        sslStatusStartedAt:
          type: string
          format: date-time
          nullable: true
        lastSSLCheck:
          type: string
          format: date-time
          nullable: true
        nextSSLCheck:
          type: string
          format: date-time
          nullable: true
        uptimeError:
          type: string
          nullable: true
        sslError:
          type: string
          nullable: true
        requestMethod:
          $ref: "#/components/schemas/HttpMethod"
        latencyHistoryEnabled:
          type: boolean
        forceNoCache:
          type: boolean
        followRedirects:
          type: boolean
        sslExpiryThreshold:
          type: integer
          format: int32
        sslValidUntil:
          type: string
          format: date-time
          nullable: true
        integrations:
          type: array
          items:
            type: string
            description: "A unique identifier for an integration, formatted as 'type:name'."
            example: email:my-email-integration
        effectiveIntegrations:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationDetailsDto"
    MonitorDto:
      required:
      - createdAt
      - enabled
      - followRedirects
      - forceNoCache
      - id
      - integrations
      - latencyHistoryEnabled
      - name
      - requestMethod
      - sslCheckEnabled
      - sslExpiryThreshold
      - uptimeCheckInterval
      - url
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        url:
          type: string
        uptimeCheckInterval:
          type: integer
          format: int32
        enabled:
          type: boolean
        sslCheckEnabled:
          type: boolean
        requestMethod:
          $ref: "#/components/schemas/HttpMethod"
        latencyHistoryEnabled:
          type: boolean
        forceNoCache:
          type: boolean
        followRedirects:
          type: boolean
        sslExpiryThreshold:
          type: integer
          format: int32
        integrations:
          type: array
          items:
            type: string
            description: "A unique identifier for an integration, formatted as 'type:name'."
            example: email:my-email-integration
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          nullable: true
    MonitorStatsDto:
      required:
      - id
      - latencyHistoryEnabled
      - latencyLogs
      type: object
      properties:
        id:
          type: integer
          format: int64
        latencyHistoryEnabled:
          type: boolean
        averageLatencyInMs:
          type: integer
          format: int32
          nullable: true
        minLatencyInMs:
          type: integer
          format: int32
          nullable: true
        maxLatencyInMs:
          type: integer
          format: int32
          nullable: true
        p90LatencyInMs:
          type: integer
          format: int32
          nullable: true
        p95LatencyInMs:
          type: integer
          format: int32
          nullable: true
        p99LatencyInMs:
          type: integer
          format: int32
          nullable: true
        latencyLogs:
          type: array
          items:
            $ref: "#/components/schemas/LatencyLogDto"
    MonitorUpdateDto:
      type: object
      properties:
        name:
          minLength: 1
          type: string
          nullable: false
        url:
          pattern: "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
          type: string
          nullable: false
        uptimeCheckInterval:
          minimum: 5
          type: integer
          format: int32
          nullable: false
        enabled:
          type: boolean
          nullable: false
        sslCheckEnabled:
          type: boolean
          nullable: false
        requestMethod:
          $ref: "#/components/schemas/HttpMethod"
        latencyHistoryEnabled:
          type: boolean
          nullable: false
        forceNoCache:
          type: boolean
          nullable: false
        followRedirects:
          type: boolean
          nullable: false
        sslExpiryThreshold:
          type: integer
          format: int32
          nullable: false
        integrations:
          type: array
          nullable: true
          items:
            type: string
            description: "A unique identifier for an integration, formatted as 'type:name'."
            example: email:my-email-integration
    MonitoringStatsDto:
      required:
      - actual
      - history
      type: object
      properties:
        actual:
          $ref: "#/components/schemas/MonitoringStatsDto.ActualMonitoringStats"
        history:
          $ref: "#/components/schemas/MonitoringStatsDto.HistoricalMonitoringStats"
    MonitoringStatsDto.ActualMonitoringStats:
      required:
      - sslStats
      - uptimeStats
      type: object
      properties:
        uptimeStats:
          $ref: "#/components/schemas/MonitoringStatsDto.ActualMonitoringStats.ActualUptimeStats"
        sslStats:
          $ref: "#/components/schemas/MonitoringStatsDto.ActualMonitoringStats.SslStats"
    MonitoringStatsDto.ActualMonitoringStats.ActualUptimeStats:
      required:
      - down
      - inProgress
      - paused
      - total
      - up
      type: object
      properties:
        total:
          type: integer
          format: int32
        down:
          type: integer
          format: int32
        up:
          type: integer
          format: int32
        paused:
          type: integer
          format: int32
        inProgress:
          type: integer
          format: int32
        lastIncident:
          type: string
          format: date-time
          nullable: true
    MonitoringStatsDto.ActualMonitoringStats.SslStats:
      required:
      - inProgress
      - invalid
      - valid
      - willExpire
      type: object
      properties:
        invalid:
          type: integer
          format: int32
        valid:
          type: integer
          format: int32
        willExpire:
          type: integer
          format: int32
        inProgress:
          type: integer
          format: int32
    MonitoringStatsDto.HistoricalMonitoringStats:
      required:
      - uptimeStats
      type: object
      properties:
        uptimeStats:
          $ref: "#/components/schemas/MonitoringStatsDto.HistoricalMonitoringStats.HistoricalUptimeStats"
    MonitoringStatsDto.HistoricalMonitoringStats.HistoricalUptimeStats:
      required:
      - affectedMonitors
      - incidents
      - totalDowntimeSeconds
      type: object
      properties:
        incidents:
          type: integer
          format: int32
        affectedMonitors:
          type: integer
          format: int32
        uptimeRatio:
          type: number
          format: double
          nullable: true
        totalDowntimeSeconds:
          type: integer
          format: int64
    SSLEventDto:
      required:
      - id
      - startedAt
      - status
      - updatedAt
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          $ref: "#/components/schemas/SslStatus"
        error:
          type: string
          nullable: true
        startedAt:
          type: string
          format: date-time
        sslValidUntil:
          type: string
          format: date-time
          nullable: true
        endedAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
    ServiceError:
      type: object
      properties:
        message:
          type: string
          nullable: true
    SettingsDto:
      required:
      - app
      - authentication
      - integrations
      type: object
      properties:
        authentication:
          $ref: "#/components/schemas/SettingsDto.AuthenticationSettingsDto"
        app:
          $ref: "#/components/schemas/SettingsDto.AppSettingsDto"
        integrations:
          $ref: "#/components/schemas/SettingsDto.IntegrationSettingsDto"
    SettingsDto.AppSettingsDto:
      required:
      - eventDataRetentionDays
      - eventLoggingEnabled
      - language
      - latencyDataRetentionDays
      - readOnlyMode
      - version
      type: object
      properties:
        version:
          type: string
        eventDataRetentionDays:
          type: integer
          format: int32
        latencyDataRetentionDays:
          type: integer
          format: int32
        language:
          type: string
        eventLoggingEnabled:
          type: boolean
        readOnlyMode:
          type: boolean
    SettingsDto.AuthenticationSettingsDto:
      required:
      - accessTokenMaxAge
      - enabled
      type: object
      properties:
        enabled:
          type: boolean
        accessTokenMaxAge:
          type: integer
          format: int64
    SettingsDto.EmailNotificationConfigDto:
      required:
      - enabled
      - fromAddress
      - global
      - id
      - name
      - toAddress
      - type
      type: object
      properties:
        id:
          type: string
          description: "A unique identifier for an integration, formatted as 'type:name'."
          example: email:my-email-integration
        type:
          $ref: "#/components/schemas/IntegrationType"
        name:
          type: string
        enabled:
          type: boolean
        global:
          type: boolean
        fromAddress:
          type: string
        toAddress:
          type: string
    SettingsDto.IntegrationSettingsDto:
      required:
      - email
      - pagerduty
      - slack
      - telegram
      type: object
      properties:
        smtp:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/SettingsDto.SmtpConfigDto"
        slack:
          type: array
          items:
            $ref: "#/components/schemas/SettingsDto.SlackNotificationConfigDto"
        pagerduty:
          type: array
          items:
            $ref: "#/components/schemas/SettingsDto.PagerdutyConfigDto"
        email:
          type: array
          items:
            $ref: "#/components/schemas/SettingsDto.EmailNotificationConfigDto"
        telegram:
          type: array
          items:
            $ref: "#/components/schemas/SettingsDto.TelegramNotificationConfigDto"
    SettingsDto.PagerdutyConfigDto:
      required:
      - enabled
      - global
      - id
      - name
      - type
      type: object
      properties:
        id:
          type: string
          description: "A unique identifier for an integration, formatted as 'type:name'."
          example: email:my-email-integration
        type:
          $ref: "#/components/schemas/IntegrationType"
        name:
          type: string
        enabled:
          type: boolean
        global:
          type: boolean
    SettingsDto.SlackNotificationConfigDto:
      required:
      - enabled
      - global
      - id
      - name
      - type
      type: object
      properties:
        id:
          type: string
          description: "A unique identifier for an integration, formatted as 'type:name'."
          example: email:my-email-integration
        type:
          $ref: "#/components/schemas/IntegrationType"
        name:
          type: string
        enabled:
          type: boolean
        global:
          type: boolean
    SettingsDto.SmtpConfigDto:
      required:
      - host
      - port
      - transportStrategy
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
          format: int32
        transportStrategy:
          type: string
    SettingsDto.TelegramNotificationConfigDto:
      required:
      - chatId
      - enabled
      - global
      - id
      - name
      - type
      type: object
      properties:
        id:
          type: string
          description: "A unique identifier for an integration, formatted as 'type:name'."
          example: email:my-email-integration
        type:
          $ref: "#/components/schemas/IntegrationType"
        name:
          type: string
        enabled:
          type: boolean
        global:
          type: boolean
        chatId:
          type: string
    SslStatus:
      type: string
      enum:
      - VALID
      - INVALID
      - WILL_EXPIRE
    UptimeEventDto:
      required:
      - id
      - startedAt
      - status
      - updatedAt
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          $ref: "#/components/schemas/UptimeStatus"
        error:
          type: string
          nullable: true
        startedAt:
          type: string
          format: date-time
        endedAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
    UptimeStatus:
      type: string
      enum:
      - UP
      - DOWN
  securitySchemes:
    apiKey:
      type: apiKey
      name: X-API-KEY
      in: header
